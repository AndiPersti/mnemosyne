apply plugin: 'com.android.application'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "org.mnemosyne"
        minSdkVersion 21
        targetSdkVersion 28
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
            }
        }

        // We don't use splits because we want to use a different assets per abi.

        flavorDimensions 'abi'
        productFlavors {
            armeabi_v7a {
                dimension 'abi'
                ndk {
                    abiFilter 'armeabi-v7a'
                }
            }
            arm64_v8a {
                dimension 'abi'
                ndk {
                    abiFilters 'arm64-v8a'
                }
            }
            x86 {
                dimension 'abi'
                ndk {
                    abiFilter 'x86'
                }
            }
            x86_64 {
                dimension 'abi'
                ndk {
                    abiFilter 'x86_64'
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            // Let gradle pack the shared library into the apk.
            jniLibs.srcDirs = ['../dependencies/python/lib']
        }
    }

    externalNativeBuild {
        cmake {
            version '3.10.2'
            path 'src/main/cpp/CMakeLists.txt'
        }
    }

    dependencies {
        implementation 'androidx.appcompat:appcompat:1.1.0'
    }
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2, 'x86':3, 'x86_64':4]
import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->
    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->
        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {
            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}
